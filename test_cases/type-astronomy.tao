import "../lib/main.tao"

# Natural numbers

data Zero
data Succ A

type One = Succ Zero
type Two = Succ One
type Three = Succ Two
type Four = Succ Three
type Five = Succ Four
type Six = Succ Five
type Seven = Succ Six
type Eight = Succ Seven
type Nine = Succ Eight
type Ten = Succ Nine

# Utility that allows us to print the result of operations
# Note that this isn't really doing any runtime calculations, other than recursively summing
# the number by walking back through the successor chain

class Number =
    => as_nat : Nat

member Zero of Number =
    => as_nat = 0

for A < Number member Succ A of Number =
    => as_nat = A.as_nat + 1

# Addition

class TAdd B =
    => Output

for B member Zero of TAdd B =
    => Output = B

for A < TAdd B, B member Succ A of TAdd B =
    => Output = Succ A.Output

# Multiplication

class TMul B =
    => Output

for B member Zero of TMul B =
    => Output = Zero

for A, B member Succ A of TMul B where
    A < TMul B,
    A.<TMul B>.Output < TAdd B,
=
    => Output = A.<TMul B>.Output.Output

fn f A < TMul Zero : A -> () =
    _ => ()

def x = f(Zero)

# Truthiness

data TTrue
data TFalse

class Truthy =
    => as_bool : Bool

member TTrue of Truthy =
    => as_bool = True

member TFalse of Truthy =
    => as_bool = False

class If A, B =
    => Output

for A, B member TTrue of If (A) B =
    => Output = A

for A, B member TFalse of If (A) B =
    => Output = B

# Demo
def main : io ~ () =
    print("Answer = " + <TTrue.<If
        TTrue.<If
            Six.<TMul Seven>.Output
            Ten.<TMul Four>.Output
        >.Output
        TFalse.<If
            Three.<TMul Two>.Output
            Nine.<TMul Nine>.Output
        >.Output
    >.Output>.as_nat)!
