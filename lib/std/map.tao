#! An ordered map.

import "../core/ops.tao"

data Map K, V =
    | MEmpty
    | MLeaf (K, V)
    \ MBranch (K, Map K V, Map K V)

for K, V member Map K V of Default =
    => default = MEmpty

for K < Debug, V < Debug member Map K V of Debug =
    => debug = fn m =>
        let debug_elements = fix(fn
            | _, MEmpty => ""
            | _, MLeaf (k, v) => k -> debug ++ ": " ++ v -> debug
            \ rec, MBranch (_, a, b) => a -> rec ++ ", " ++ b -> rec)
        in
        "{ " ++ m -> debug_elements ++ " }"

$[util]
fn insert K < Ord, V : K -> V -> Map K V -> Map K V =
    | k, v, MEmpty => MLeaf (k, v)
    | k, v, MLeaf (k_old, v_old) => when K.cmp(k, k_old) is
        | Less => MBranch (k_old, MLeaf (k, v), MLeaf (k_old, v_old))
        | More => MBranch (k, MLeaf (k_old, v_old), MLeaf (k, v))
        \ Equal => MLeaf (k, v)
    \ k, v, MBranch (k_ref, a, b) => if K.less(k, k_ref)
        then MBranch (k_ref, a->insert(k, v), b)
        else MBranch (k_ref, a, b->insert(k, v))

$[util]
fn index K < Ord, V : K -> Map K V -> Maybe V =
    | _, MEmpty => None
    | k, MLeaf (k_old, v) => if K.eq(k, k_old)
        then Just v
        else None
    \ k, MBranch (k_ref, a, b) => if K.less(k, k_ref)
        then a->index(k)
        else b->index(k)

$[util]
fn contains K < Ord, V : K -> Map K V -> Bool =
    k, m => when m->index(k) is
        | Just _ => True
        \ None => False

$[util]
def from_list K < Ord, V : [(K, V)] -> Map K V =
    fold(default, fn m, (k, v) => m->insert(k, v))
