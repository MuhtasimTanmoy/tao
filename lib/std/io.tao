type IO A = @ -> (@, A)

effect pure = ()
effect input = () => Str
effect print = Str => ()
effect rand = Nat => Nat
effect io = input + print + rand

# Core monadic IO operations

$[util]
fn __print : Str -> IO () = s, uni =>
    let uni = @print(uni, s) in
    (uni, ())

$[util]
fn __input : IO Str = uni => @input(uni)

$[util]
fn __rand : Nat -> IO Nat = n, uni => @rand(uni, n)

# High-level effect IO operations

$[util]
def input : input ~ Str = @suspend(())

$[util]
fn print : Str -> print ~ () = s => @suspend(s)

$[util]
fn rand : Nat -> rand ~ Nat = max => @suspend(max)

$[util]
def rand_bool : rand ~ Bool = rand(2)! = 0
