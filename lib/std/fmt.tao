#! Utilities for formatting and displaying data.

import "type.tao"
import "str.tao"

# Debug

class Debug =
    => debug : Self -> Str

$[util]
def debug A < Debug : A -> Str = A.debug

member Bool of Debug =
    => debug = fn
        | True => "True"
        \ False => "False"

for A < Debug member [A] of Debug =
    => debug = fn xs => dispatch(
        xs,
        # Specialise on [Char]
        fn s : Str => "\"" ++ s ++ "\"",
        # Fallback for [A]
        fn xs => "[" ++ xs -> fix(fn
            | _, [] => ""
            | _, [x] => x -> debug
            \ rec, [x .. xs] => x -> debug ++ ", " ++ xs -> rec) ++ "]",
    )

member Char of Debug =
    => debug = fn c => "'" ++ [c] ++ "'"

member Nat of Debug =
    => debug = fn x => @display_int(--x)

member () of Debug =
    => debug = fn () => "()"

for A < Debug, B < Debug member (A, B) of Debug =
    => debug = fn (a, b) => "(" ++ A.debug(a) ++ ", " ++ B.debug(b) ++ ")"

for A < Debug member Maybe A of Debug =
    => debug = fn
        | None => "None"
        \ Just a => "Some " + a->debug

# TODO: Reenable this when conflict with Str is resolved!
#for A < Debug member [A] of Debug =
#    => debug = fn xs => "[" ++ xs->fold("", fn s, x => s ++ ", " ++ x->A.debug) ++ "]"

# Show

class Show =
    => show : Self -> Str

$[util]
def show A < Show : A -> Str = A.show

for A < Show member [A] of Show =
    => show = fn xs => dispatch(
        xs,
        # Specialise on [Char]
        fn s => s,
        # Fallback for [A]
        fn xs => xs -> fix(fn
            | _, [] => ""
            | _, [x] => x -> show
            \ rec, [x .. xs] => x -> show ++ ", " ++ xs -> rec),
    )

member Nat of Show =
    => show = fn x => @display_int(--x)

member Int of Show =
    => show = fn x => @display_int(x)

member Bool of Show =
    => show = fn
        | True => "true"
        \ False => "false"

member Char of Show =
    => show = fn c => [c]
