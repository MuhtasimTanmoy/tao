#! Utilities for manipulating and traversing containers.

import "math.tao"

class Map A, B, e =
    => Output
    => map : (A -> e ~ B) -> Self -> Self.Output

for A, B, e member Maybe A of Map A B e =
    => Output = e ~ Maybe B
    => map = fn
        | _, None => None
        \ f, Just a => Just a->f!

$[util]
def map V < Map A B e, A, B, e : (A -> e ~ B) -> V -> V.Output = V.map

$[util]
fn sfold S < Stream A e, A, B, e : B -> (B -> A -> e ~ B) -> S -> e ~ B =
    b, f, s => when s->S.next is
        | None => b
        \ Just (x, s) => sfold(f(b, x!)!, f, s)!

$[util]
fn fold S < ToStream A e, A, B, e : B -> (B -> A -> e ~ B) -> S -> e ~ B =
    b, f, s => s->S.to_stream->sfold(b, f)!

$[util]
fn sum S, A, e : S -> e ~ A where
    S < ToStream A e,
    A < Zero + Add A with { Output = A },
=
    # TODO: Why is this hint required?
    s => s->fold(A.zero, fn x, y : A => x + y)

$[util]
fn product S, A, e : S -> e ~ A where
    S < ToStream A e,
    A < One + Mul A with { Output = A },
=
    # TODO: Why is this hint required?
    s => s->fold(A.one, fn x, y : A => x * y)
