#! Utilities for programming with lists.

import "../core/ops.tao"
import "value.tao"
import "container.tao"

for A, B, e member [A] of Map (A) B e =
    => Output = e ~ [B]
    => map = fn
        | _, [] => []
        \ f, [x .. xs] => [x->f! .. xs->Self.map(f)!]

$[util]
fn filter A : (A -> Bool) -> [A] -> [A] =
    | _, [] => []
    \ f, [x .. xs] => (if x->f then [x] else []) ++ xs->filter(f)

$[util]
fn find_first A : (A -> Bool) -> [A] -> Maybe A = f, xs => when xs->filter(f) is
    | [] => None
    \ [x ..] => Just x

$[util]
fn len A : [A] -> Nat = xs => @len_list(xs)

$[util]
fn repeat A : Nat -> [A] -> [A] =
    | 0, _ => []
    \ n + 1, x => x ++ x->repeat(n)

$[util]
fn swap A : Nat -> (A -> A) -> [A] -> [A] = n, f, xs => when @skip_list(xs, n) is
    | [] => xs
    \ [x .. tail] => @trim_list(xs, n) ++ [x->f .. tail]

$[util]
fn nth A : Nat -> [A] -> Maybe A = n, xs => when @skip_list(xs, n) is
    | [x ..] => Just x
    \ [] => None

$[util]
fn sort A < Ord : [A] -> [A] =
    | [] => []
    \ [mid .. xs] =>
        xs->filter(fn x => x < mid)->sort
            ++
        [mid]
            ++
        xs->filter(fn x => x >= mid)->sort

$[util]
fn rev A : [A] -> [A] =
    | [] => []
    \ [x .. xs] => xs->rev ++ [x]

# def sum A : [A] -> A where
#     A < Zero + Add A with { Output = A },
# =
#     fold(A.zero, fn x, y => x + y)

# def product A : [A] -> A where
#     A < One + Mul A with { Output = A }
# =
    # fold(A.one, fn x, y => A.mul(x, y))

$[util]
fn find_index_start A < Eq : Nat -> A -> [A] -> Maybe Nat =
	| idx, c, [head .. tail] => if c = head
		then Just idx
		else tail->find_index_start(idx + 1, c)
	\ idx, c, [] => None

$[util]
def find_index A < Eq : A -> [A] -> Maybe Nat = find_index_start(0)
