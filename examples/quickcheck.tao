import "../lib/main.tao"

# Allows generating arbitrary values of a type
class Arbitrary =
    => gen : rand ~ Self

def arbitrary A < Arbitrary : rand ~ A = A.gen!

member Nat of Arbitrary =
    => gen = rand(1000)!

member Bool of Arbitrary =
    => gen = rand_bool!

for A < Arbitrary, B < Arbitrary member (A, B) of Arbitrary =
    => gen = (arbitrary!, arbitrary!)

for A < Arbitrary member [A] of Arbitrary =
    => gen = range(0, rand(100)!)
        -> map(fn _ => arbitrary!)
        -> collect!

# Allows values of a type to be minimised
class Minimise =
    => minimise : Self -> rand ~ Maybe Self

def minimise A < Minimise : A -> rand ~ Maybe A = A.minimise

member Nat of Minimise =
    => minimise = fn
        | 0 => None
        \ n => Just rand(n)!

member Bool of Minimise =
    => minimise = fn x => Just !x

for A < Minimise, B < Minimise member (A, B) of Minimise =
    => minimise = fn (a, b) => when a->minimise!, b->minimise! is
        | None, None => None
        \ a_min, b_min => Just (
            if rand_bool! then a_min->unwrap_or(a) else a,
            if rand_bool! then b_min->unwrap_or(b) else b,
        )

for A < Minimise member [A] of Minimise =
    => minimise = fn
        | [] => None
        \ [x .. xs] => Just (when rand(1 + xs->len)! is
            | 0 => []
            | 1 => when x->minimise! is
                | None => []
                \ Just x => [x]
            \ _ => [x]) ++ when xs->minimise! is
                | None => []
                \ Just xs => xs

fn quickcheck A < Arbitrary + Minimise, B : (A -> B) -> (A -> B -> Bool) -> rand ~ Maybe A =
    # Generate 100 arbitrary values
    f, check => range(0, 100)
        -> collect_list
        -> map(fn _ => arbitrary!)!
        # Find the first value that fails to pass the check
        -> find_first(fn x => !x->f->check(x))
        # Try 100 times to minimise the value
        -> flat_map(fn x => Just range(0, 100)
            -> collect_list
            -> fold(x, fn x, _ => x
                -> minimise!
                # Only take minimised values that fail to pass the check
                -> filter_opt(fn x => !x->f->check(x))
                -> unwrap_or(x))!)!

# This reverse function is broken and fails to reverse lists > 3 items long!
fn reverse A : [A] -> [A] =
    | [] => []
    | [a] => [a]
    | [a, b] => [b, a]
    | [a, b, c] => [c, b, a]
    \ [a, b .. xs] => xs->reverse ++ [a, b]

def main : io ~ () =
    # Here we try to generate a simple test-case for which the reverse function fails
    let xs = quickcheck(
        # Show quickcheck how to transform an arbitrary list
        # You can change the type hint to `[Nat]`: everything still works!
        fn xs : [Bool] => xs->reverse,
        # Check the validity of the output (i.e: that reversing the reversed list yields the original list)
        fn old, new => new->reverse = old,
    )! in
    print("Failed case: " + xs->debug)!
